// Documentation on Data sources: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
// A data source determines how Prisma connects your database
// Using the mysql as a provider and the 'DATABASE_URL' from the '.env' file
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Documentation on Generators: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
// A generator determines which assets are created when you run the 'prisma generate' command
generator client {
  provider = "prisma-client-js"
}

// Documentation on Data models: https://www.prisma.io/docs/concepts/components/prisma-schema/data-model
// Profile table
model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  // Documentation on relations: https://www.prisma.io/docs/concepts/components/prisma-schema/relations
  // Creates back relations with the Server, Member and Channel tables
  servers  Server[]
  members  Member[]
  channels Channel[]

  // Sets the creation date and update date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  // Documentation on relations: https://www.prisma.io/docs/concepts/components/prisma-schema/relations
  // Creates relations with the Profile tables
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key to fix the warning on line 45
  @@index([profileId])
}

// Documentation on Enums: https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#defining-enums
// Creates roles for members on servers
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  // Sets the default role of a new member to GUEST
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

// Creates types for channels on servers
enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  // Sets the default type of a new channel to TEXT
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

// Messages model
model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  // Optional file url
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

// Connects the members to an 1-1 conversation
model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

// Direct Messages model
model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  // Optional file url
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
